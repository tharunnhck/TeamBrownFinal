{"name": "test_notify", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=122.0.6261.112)\nStacktrace:\n\tGetHandleVerifier [0x00007FF76D03AD02+56930]\n\t(No symbol) [0x00007FF76CFAF602]\n\t(No symbol) [0x00007FF76CE642E5]\n\t(No symbol) [0x00007FF76CE41D4C]\n\t(No symbol) [0x00007FF76CED23F7]\n\t(No symbol) [0x00007FF76CEE7891]\n\t(No symbol) [0x00007FF76CECBA43]\n\t(No symbol) [0x00007FF76CE9D438]\n\t(No symbol) [0x00007FF76CE9E4D1]\n\tGetHandleVerifier [0x00007FF76D3B6F8D+3711213]\n\tGetHandleVerifier [0x00007FF76D4104CD+4077101]\n\tGetHandleVerifier [0x00007FF76D40865F+4044735]\n\tGetHandleVerifier [0x00007FF76D0D9736+706710]\n\t(No symbol) [0x00007FF76CFBB8DF]\n\t(No symbol) [0x00007FF76CFB6AC4]\n\t(No symbol) [0x00007FF76CFB6C1C]\n\t(No symbol) [0x00007FF76CFA68D4]\n\tBaseThreadInitThunk [0x00007FFAAB51257D+29]\n\tRtlUserThreadStart [0x00007FFAAB82AA58+40]", "trace": "def test_notify():\n>       notifytab=driver.find_element(By.XPATH,'/html/body/div[1]/div/div/div[2]/header/div/div/div/div[1]/div[2]/nav/a[3]')\n\nmain.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000219168871A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF76CFA68D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAAB51257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAAB82AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=122.0.6261.112)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF76D03AD02+56930]\nE       \t(No symbol) [0x00007FF76CFAF602]\nE       \t(No symbol) [0x00007FF76CE642E5]\nE       \t(No symbol) [0x00007FF76CE41D4C]\nE       \t(No symbol) [0x00007FF76CED23F7]\nE       \t(No symbol) [0x00007FF76CEE7891]\nE       \t(No symbol) [0x00007FF76CECBA43]\nE       \t(No symbol) [0x00007FF76CE9D438]\nE       \t(No symbol) [0x00007FF76CE9E4D1]\nE       \tGetHandleVerifier [0x00007FF76D3B6F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF76D4104CD+4077101]\nE       \tGetHandleVerifier [0x00007FF76D40865F+4044735]\nE       \tGetHandleVerifier [0x00007FF76D0D9736+706710]\nE       \t(No symbol) [0x00007FF76CFBB8DF]\nE       \t(No symbol) [0x00007FF76CFB6AC4]\nE       \t(No symbol) [0x00007FF76CFB6C1C]\nE       \t(No symbol) [0x00007FF76CFA68D4]\nE       \tBaseThreadInitThunk [0x00007FFAAB51257D+29]\nE       \tRtlUserThreadStart [0x00007FFAAB82AA58+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1710392178223, "stop": 1710392178224, "uuid": "1b96e7b1-61ad-420f-a299-a2b802fd676b", "historyId": "7790470777da1c450c3fd56aed3870a9", "testCaseId": "7790470777da1c450c3fd56aed3870a9", "fullName": "main#test_notify", "labels": [{"name": "suite", "value": "main"}, {"name": "host", "value": "CSLAB1-25"}, {"name": "thread", "value": "16540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main"}]}